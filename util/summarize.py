import matplotlib.pyplot as plt

def summarize_performance(history, Model_path)
    # Plot training & validation accuracy values
    plt.plot(history.history['Mean_IOU_label'])
    plt.plot(history.history['val_Mean_IOU_label'])
    plt.title('Model Mean_IOU_label')
    plt.ylabel('Mean_IOU_label')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Val'], loc='upper left')
    plt.savefig(os.path.join(Model_path,'Mean_IOU_label.png'))
    plt.clf()
    plt.cla()
    plt.close()
    
    plt.plot(history.history['per_pixel_acc'])
    plt.plot(history.history['val_per_pixel_acc'])
    plt.title('Model per_pixel_acc')
    plt.ylabel('per_pixel_acc')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Val'], loc='upper left')
    plt.savefig(os.path.join(Model_path,'per_pixel_acc.png'))
    plt.clf()
    plt.cla()
    plt.close()
    
    plt.plot(history.history['Mean_IOU'])
    plt.plot(history.history['val_Mean_IOU'])
    plt.title('Model Mean_IOU')
    plt.ylabel('Mean_IOU')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Val'], loc='upper left')
    plt.savefig(os.path.join(Model_path,'Mean_IOU.png'))
    plt.clf()
    plt.cla()
    plt.close()

    # Plot training & validation loss values
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('Model loss')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Val'], loc='upper left')
    plt.savefig(os.path.join(Model_path,'loss.png'))
    plt.clf()
    plt.cla()
    plt.close()